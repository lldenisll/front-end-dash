{"remainingRequest":"/Users/namorado/Documents/machiron/vue-material-kit-master/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/namorado/Documents/machiron/vue-material-kit-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/namorado/Documents/machiron/vue-material-kit-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/namorado/Documents/machiron/vue-material-kit-master/src/views/Landing.vue?vue&type=template&id=a8baa566&scoped=true&","dependencies":[{"path":"/Users/namorado/Documents/machiron/vue-material-kit-master/src/views/Landing.vue","mtime":1617558503930},{"path":"/Users/namorado/Documents/machiron/vue-material-kit-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/namorado/Documents/machiron/vue-material-kit-master/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/namorado/Documents/machiron/vue-material-kit-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/namorado/Documents/machiron/vue-material-kit-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}